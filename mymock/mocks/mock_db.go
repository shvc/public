// Code generated by MockGen. DO NOT EDIT.
// Source: mymock/dber (interfaces: Dber)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDber is a mock of Dber interface.
type MockDber struct {
	ctrl     *gomock.Controller
	recorder *MockDberMockRecorder
}

// MockDberMockRecorder is the mock recorder for MockDber.
type MockDberMockRecorder struct {
	mock *MockDber
}

// NewMockDber creates a new mock instance.
func NewMockDber(ctrl *gomock.Controller) *MockDber {
	mock := &MockDber{ctrl: ctrl}
	mock.recorder = &MockDberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDber) EXPECT() *MockDberMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockDber) Get(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDberMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDber)(nil).Get), arg0)
}

// Put mocks base method.
func (m *MockDber) Put(arg0 string, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockDberMockRecorder) Put(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockDber)(nil).Put), arg0, arg1)
}
